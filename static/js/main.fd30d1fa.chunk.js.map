{"version":3,"sources":["components/HexGrid/HexGrid.tsx","models/models.tsx","components/Hex/HexUtils.tsx","components/Hex/Hex.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LAYOUT_FLAT","f0","f1","f2","Math","sqrt","f3","b0","b1","b2","b3","angle","LAYOUT_POINT","defaultSettings","flat","origin","x","y","size","spacing","HexGrid","height","width","viewBox","children","settings","calculateCornerCoordinates","point","orientation","corners","center","Array","from","i","offset","corner","PI","cos","sin","getPointOffset","push","hexContext","getPoints","map","join","getChildContext","console","log","className","version","xmlns","React","Children","child","isValidElement","cloneElement","HexCoordinates","z","this","HexUtils","equals","posA","posB","hexToPixel","pos","pixelToHex","pt","round","roundX","roundY","roundZ","xDiff","abs","yDiff","zDiff","Hex","props","useState","state","coordinates","centerPixels","cornerPixels","useEffect","onMouseEnter","e","onMouseOver","onMouseLeave","onClick","onDragStart","onDragEnd","preventDefault","onDragOver","onDrop","points","fill","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd30d1fa.chunk.js","sourcesContent":["import React from 'react';\r\nimport { HexGridSettings, HexGridProps } from './HexGridProps';\r\nimport { Orientation, Point } from '../../models/models'\r\n\r\nconst LAYOUT_FLAT = {\r\n  f0: 3.0 / 2.0,\r\n  f1: 0.0,\r\n  f2: Math.sqrt(3.0) / 2.0,\r\n  f3: Math.sqrt(3.0),\r\n  b0: 2.0 / 3.0,\r\n  b1: 0.0,\r\n  b2: - 1.0 / 3.0,\r\n  b3: Math.sqrt(3.0) / 3.0,\r\n  angle: 0.0\r\n} as Orientation\r\n\r\nconst LAYOUT_POINT = {\r\n  f0: Math.sqrt(3.0),\r\n  f1: Math.sqrt(3.0) / 2.0,\r\n  f2: 0.0,\r\n  f3: 3.0 / 2.0,\r\n  b0: Math.sqrt(3.0) / 3.0, \r\n  b1: - 1.0 / 3.0,\r\n  b2: 0.0,\r\n  b3: 2.0 / 3.0,\r\n  angle: 0.5\r\n} as Orientation\r\n\r\nconst defaultSettings = {\r\n  flat: true,\r\n  origin: {\r\n    x: 0,\r\n    y: 0\r\n  } as Point,\r\n  size: {\r\n    x: 12,\r\n    y: 12\r\n  } as Point,\r\n  spacing: 1\r\n} as HexGridSettings\r\n\r\nfunction HexGrid({ height = 600, width = 800, viewBox = \"-50 -50 100 100\", children = null, settings = defaultSettings }: HexGridProps) {\r\n  \r\n  const getPointOffset = (corner: number, orientation: Orientation) => {\r\n    let angle = 2.0 * Math.PI * (corner + orientation.angle) / 6;\r\n    return { x: settings.size.x * Math.cos(angle), y: settings.size.y * Math.sin(angle) } as Point\r\n  }\r\n\r\n  const calculateCornerCoordinates = (point: Point, orientation: Orientation) => {\r\n    const corners: Point[] = [];\r\n    const center = point;\r\n\r\n    Array.from(new Array(6), (x, i) => {\r\n      const offset = getPointOffset(i, orientation);\r\n      const point = {x: center.x + offset.x, y: center.y + offset.y} as Point;\r\n      corners.push(point);\r\n    });\r\n\r\n    return corners;\r\n  }\r\n\r\n  const getChildContext = () => {\r\n    const orientation = (settings.flat) ? LAYOUT_FLAT : LAYOUT_POINT;\r\n    const getPoints = function (point: Point) {\r\n      const cornerCoords = calculateCornerCoordinates(point, orientation);\r\n      return cornerCoords.map(point => `${point.x},${point.y}`).join(' ');\r\n    }\r\n\r\n    return {\r\n      settings,\r\n      orientation,\r\n      getPoints\r\n    };\r\n  }\r\n\r\n  let hexContext = getChildContext();\r\n  console.log(hexContext);\r\n\r\n  return (\r\n    <svg className=\"grid\" height={height} width={width} viewBox={viewBox} version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      {/* {children} */}\r\n      {React.Children.map(children, child => {\r\n        if (React.isValidElement(child)) {\r\n          return React.cloneElement(child, { hexContext });\r\n        }\r\n      })}\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default HexGrid;","export class HexCoordinates {\r\n  // we use axial coordinates by default, so the important coordinates are x, and y\r\n  // we also add in a z coordinate to create have a cube coordinate system as well\r\n  // this allows us to use algorithms which are simpler for cube coordinates rather\r\n  // than axial coordinates (the cube coordinates are under the hood here i.e. the\r\n  // user cannot set the z coordinate manually, prevents them from messing this up)\r\n  x: number;\r\n  y: number;\r\n  z: number\r\n  constructor(x: number, y: number){\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = -x - y;\r\n  }\r\n}\r\n\r\nexport type Point = {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport type Orientation = {\r\n  f0: number;\r\n  f1: number;\r\n  f2: number;\r\n  f3: number;\r\n  b0: number;\r\n  b1: number;\r\n  b2: number;\r\n  b3: number;\r\n  angle: number;\r\n}","import { HexCoordinates, Orientation, Point } from \"../../models/models\"\r\nimport { HexGridSettings } from \"../HexGrid/HexGridProps\";\r\n\r\nconst HexUtils = {\r\n  \r\n  equals(posA: HexCoordinates, posB: HexCoordinates) {\r\n    return posA.x === posB.x && posA.y === posB.y && posA.z === posB.z;\r\n  },\r\n\r\n  hexToPixel(pos: HexCoordinates, orientation: Orientation, settings: HexGridSettings) {\r\n    const x = settings.origin.x + (orientation.f0 * pos.x + orientation.f1 * pos.y) * settings.size.x * settings.spacing;\r\n    const y = settings.origin.y + (orientation.f2 * pos.x + orientation.f3 * pos.y) * settings.size.y * settings.spacing;\r\n    return { x, y } as Point;\r\n  },\r\n\r\n  pixelToHex(point: Point, orientation: Orientation, settings: HexGridSettings) {\r\n    const pt = {\r\n      x: (point.x - settings.origin.x) / settings.size.x,\r\n      y: (point.y - settings.origin.y) / settings.size.y\r\n    } as Point\r\n    const x = orientation.b0 * pt.x + orientation.b1 * pt.y;\r\n    const y = orientation.b2 * pt.x + orientation.b3 * pt.y;\r\n    return HexUtils.round(new HexCoordinates(x, y));\r\n  },\r\n\r\n  round(pos: HexCoordinates) {\r\n    const roundX = Math.round(pos.x);\r\n    const roundY = Math.round(pos.y);\r\n    const roundZ = Math.round(pos.z);\r\n    const xDiff = Math.abs(roundX - pos.x);\r\n    const yDiff = Math.abs(roundY - pos.y);\r\n    const zDiff = Math.abs(roundZ - pos.z);\r\n    \r\n    if (xDiff > yDiff && xDiff > zDiff) {\r\n      return new HexCoordinates(-roundY - roundZ, roundY);\r\n    } else if (yDiff > zDiff) {\r\n      return new HexCoordinates(roundX, -roundX - roundZ);\r\n    }\r\n    return new HexCoordinates(roundX, roundY);\r\n  }\r\n}\r\n\r\nexport default HexUtils","import React, { useState, useEffect } from 'react';\r\nimport { Point } from '../../models/models';\r\nimport HexProps from './HexProps'\r\nimport HexUtils from './HexUtils';\r\n\r\nfunction Hex(props: HexProps) {\r\n  const [state, setstate] = useState({})\r\n\r\n  console.log(props.coordinates);\r\n\r\n  const centerPixels = props.hexContext ? HexUtils.hexToPixel(props.coordinates, props.hexContext.orientation, props.hexContext.settings) : { x: 0, y: 0 } as Point\r\n  const cornerPixels = props.hexContext ? props.hexContext.getPoints(centerPixels) : \"0,0 250,190 160,210\";\r\n\r\n  useEffect(() => {\r\n    console.log(props);\r\n  })\r\n\r\n  const onMouseEnter = (e: React.MouseEvent) => {\r\n    // console.log('onMouseEnter');\r\n    if (props.onMouseEnter) {\r\n      props.onMouseEnter(e);\r\n    }\r\n  }\r\n  const onMouseOver = (e: React.MouseEvent) => {\r\n    if (props.onMouseOver) {\r\n      props.onMouseOver(e);\r\n      // props.onMouseOver(e, this);\r\n    }\r\n  }\r\n  const onMouseLeave = (e: React.MouseEvent) => {\r\n    if (props.onMouseLeave) {\r\n      props.onMouseLeave(e);\r\n      // props.onMouseLeave(e, this);\r\n    }\r\n  }\r\n  const onClick = (e: React.MouseEvent) => {\r\n    console.log('onClick');\r\n    console.log(state);\r\n    console.log(props.coordinates);\r\n    console.log(centerPixels);\r\n    if (props.onClick) {\r\n      props.onClick(e);\r\n      // props.onClick(e, this);\r\n    }\r\n  }\r\n  const onDragStart = (e: React.MouseEvent) => {\r\n    if (props.onDragStart) {\r\n      props.onDragStart(e);\r\n      // const targetProps = {\r\n      //   ...state,\r\n      //   data: props.data,\r\n      //   fill: props.fill,\r\n      //   className: props.className\r\n      // };\r\n      // e.dataTransfer.setData('hex', JSON.stringify(targetProps));\r\n      // props.onDragStart(e, this);\r\n    }\r\n  }\r\n  const onDragEnd = (e: React.MouseEvent) => {\r\n    if (props.onDragEnd) {\r\n      e.preventDefault();\r\n      props.onDragEnd(e);\r\n      // const success = (e.dataTransfer.dropEffect !== 'none');\r\n      // props.onDragEnd(e, this, success);\r\n    }\r\n  }\r\n  const onDragOver = (e: React.MouseEvent) => {\r\n    if (props.onDragOver) {\r\n      props.onDragOver(e);\r\n      // props.onDragOver(e, this);\r\n    }\r\n  }\r\n  const onDrop = (e: React.MouseEvent) => {\r\n    if (props.onDrop) {\r\n      e.preventDefault();\r\n      props.onDrop(e);\r\n      // const target = JSON.parse(e.dataTransfer.getData('hex'));\r\n      // props.onDrop(e, this, target);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <g\r\n      // className={classNames('hex-group', className)}\r\n      // transform={`translate(${pixel.x}, ${pixel.y})`}\r\n      // draggable=\"true\"\r\n      onMouseEnter={e => onMouseEnter(e)}\r\n      onMouseOver={e => onMouseOver(e)}\r\n      onMouseLeave={e => onMouseLeave(e)}\r\n      onClick={e => onClick(e)}\r\n      onDragStart={e => onDragStart(e)}\r\n      onDragEnd={e => onDragEnd(e)}\r\n      onDragOver={e => onDragOver(e)}\r\n      onDrop={e => onDrop(e)}\r\n    >\r\n      <g className=\"hex\">\r\n        {props.hexContext ? \r\n          <polygon points={cornerPixels} fill=\"lime\" /> :\r\n          <polygon points={\"0,0 250,190 160,210\"} fill=\"lime\" />\r\n        }\r\n        {/* <polygon points={points} fill={fillId} style={cellStyle} />   */}\r\n        {props.children}\r\n      </g>\r\n    </g>\r\n  );\r\n}\r\n\r\nexport default Hex;\r\n","import { MouseEvent } from 'react';\r\nimport './App.css';\r\nimport HexGrid from './components/HexGrid/HexGrid'\r\nimport Hex from './components/Hex/Hex';\r\nimport { HexCoordinates } from './models/models';\r\n// import { HexCoordinates } from './models/models';\r\n\r\nfunction App() {\r\n  const onMouseEnter = (e: MouseEvent) => {\r\n    console.log('onMouseEnter App');\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <HexGrid height={210} width={500}>\r\n        <Hex coordinates={new HexCoordinates(0, 0)} />\r\n        <Hex coordinates={new HexCoordinates(1, 0)} />\r\n        <Hex coordinates={new HexCoordinates(-1, 0)} />\r\n        <Hex coordinates={new HexCoordinates(-1, 1)} />\r\n        <Hex coordinates={new HexCoordinates(-1, 2)} />\r\n        <Hex coordinates={new HexCoordinates(-2, 1)} />\r\n      </HexGrid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}